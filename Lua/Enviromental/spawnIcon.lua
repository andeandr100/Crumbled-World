require("Enviromental/spawnIconMeshBuilder.lua") 
require("Enviromental/spawnIconNpcTexture.lua")
--this = SceneNode()
function create()
	return false
--	SpawnIconMeshBuilder.initIconBuilder()
--	local billboard = Core.getBillboard("spawnIconInfo")
--	local spawnAreaName = billboard:getString("spawnAreaName")
--	
--	local routePlanner = this:findNodeByType(NodeId.RoutePlanner)
--	spawnArea = routePlanner:getSpawnArea(spawnAreaName)
--	shader = Core.getShader("spawnIcon")
--	shaderText = Core.getShader("spawnIconText")
--	
--	iconInfo = {}
--	iconInfo["size"] = 0
--	
--	if spawnArea then
--		enemyInfo = spawnArea:getEnemyInfo(0)
--		this:setLocalPosition( spawnArea:getIsland():getGlobalMatrix():inverseM() * spawnArea:getGlobalPosition() + Vec3(0,3,0))
--		visible = false
--		currentWave = -1
--		return true
--	else	
--		return false
--	end
end
--
--function setOffset(numIcon)
--	
--	local iconSize = radius * 2.1
--	
--	if numIcon <= 4 then
--		local rowSize = numIcon * iconSize
--		local startOffset = -rowSize * 0.5 + iconSize * 0.5
--		
--		for i=0, numIcon-1 do
--			iconInfo[i]["offset"] = Vec2(startOffset + i * iconSize,0)
--			iconInfo[i]["icon"]:setUniform(shader,"offset", Vec2(startOffset + i * iconSize,0))
--		end
--	else
--		firstRowSize = math.floor( numIcon / 2 )
--		secondRowSize = numIcon - firstRowSize
--		
--		for i=0, firstRowSize-1 do
--			local rowSize = firstRowSize * iconSize
--			local startOffset = -rowSize * 0.5 + iconSize * 0.5
--			iconInfo[i]["offset"] = Vec2(startOffset + iconSize * i,-radius)
--			iconInfo[i]["icon"]:setUniform(shader,"offset", Vec2(startOffset + iconSize * i,-radius))
--		end
--		
--		for i=0, secondRowSize-1 do
--			local rowSize = secondRowSize * iconSize
--			local startOffset = -rowSize * 0.5 + iconSize * 0.5
--			iconInfo[firstRowSize+i]["offset"] = Vec2(startOffset + iconSize * i,radius)
--			iconInfo[firstRowSize+i]["icon"]:setUniform(shader,"offset", Vec2(startOffset + iconSize * i,radius))
--		end
--	end
--end
--
--function checkIfWaveHasChanged()
--	local statsBillboard = Core.getBillboard("stats")
--	local wave = statsBillboard:getInt("wave")
--	
--	if currentWave ~= wave then
--		currentWave = wave
--		visible = true
--	
--		enemyInfo = spawnArea:getEnemyInfo(currentWave)
--		for i=0, enemyInfo:size()-1 do
--			if i==iconInfo["size"] then
--				iconInfo["size"] = i+1
--				iconInfo[i] = {}
--				iconInfo[i]["icon"] = SpawnIconMeshBuilder.loadIconMesh(shader)
--				iconInfo[i]["icon"]:setVisible(false)	
--				iconInfo[i]["LoadedChar"] = 0
--				iconInfo[i]["numNpc"] = -1
--							
--			end
--			iconInfo[i]["icon"]:setTexture(shader,SpawnIconNpcTexture.getTexture(enemyInfo:item(i).scriptName),0)
--		end
--		setOffset(enemyInfo:size())
--		
--		for i=0, enemyInfo:size()-1 do
--			SpawnIconMeshBuilder.updateNumberOfNpc(iconInfo[i], enemyInfo:item(i).numEnemies, true, shaderText )
--		end
--	end
--end
--
function update()
--	checkIfWaveHasChanged()
--	for i=0, enemyInfo:size()-1 do
--		if enemyInfo:item(i).numEnemies > 0 then
--			iconInfo[i]["icon"]:setVisible(true)	
--			--update remaning number of npc
--			SpawnIconNpcTexture.update(enemyInfo:item(i).scriptName)
--			SpawnIconMeshBuilder.updateNumberOfNpc(iconInfo[i], enemyInfo:item(i).numEnemies, false, shaderText )
--		else
--			SpawnIconMeshBuilder.setVisible(iconInfo[i],false)	
--		end
--	end
--	return true
	return false
end